plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.4'
    id 'io.spring.dependency-management' version '1.1.6'
}

group = 'app.premierleague'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // --- SOAP + JAXB (added) ---
    implementation 'org.springframework.boot:spring-boot-starter-web-services'
    implementation 'org.glassfish.jaxb:jaxb-runtime:4.0.5'
    implementation 'wsdl4j:wsdl4j:1.6.3'

    runtimeOnly 'org.postgresql:postgresql:42.7.4'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

sourceSets {
    main {
        resources {
            srcDirs = ['src/main/resources', 'initdb']
        }
        // include generated JAXB sources
        java {
            srcDirs += ["$buildDir/generated-sources/jaxb"]
        }
    }
}

// --- XJC code generation ---
configurations {
    jaxb
}
dependencies {
    jaxb 'org.glassfish.jaxb:jaxb-xjc:4.0.5'
}

tasks.register('xjc') {
    group = 'build'
    description = 'Generate JAXB classes from XSD'

    // Where your schema lives
    def schemaDir = file('src/main/resources')
    def outDir = file("$buildDir/generated-sources/jaxb")

    inputs.dir(schemaDir)
    outputs.dir(outDir)

    doLast {
        if (!schemaDir.exists()) {
            throw new GradleException("XSD folder not found: ${schemaDir}")
        }
        def schemaFile = file('src/main/resources/matches.xsd')
        if (!schemaFile.exists()) {
            throw new GradleException("XSD file not found: ${schemaFile}")
        }

        outDir.mkdirs()

        ant.taskdef(
            name: 'xjc',
            classname: 'com.sun.tools.xjc.XJCTask',
            classpath: configurations.jaxb.asPath
        )

        // Use dir/includes form (avoids Windows URI quirks)
        ant.xjc(
            destdir: outDir,
            package: 'app.premierleague.ws',
            extension: true
        ) {
            schema(dir: schemaDir, includes: 'matches.xsd')
        }
    }
}

tasks.named('compileJava') {
    dependsOn tasks.named('xjc')
}

// Make sure generated sources are compiled
sourceSets {
    main {
        java {
            srcDirs += ["$buildDir/generated-sources/jaxb"]
        }
    }
}
