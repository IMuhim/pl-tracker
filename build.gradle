plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.4'
    id 'io.spring.dependency-management' version '1.1.6'
}

group = 'app.premierleague'
version = '0.0.1-SNAPSHOT'

java {
    toolchain { languageVersion = JavaLanguageVersion.of(21) }
}

repositories { mavenCentral() }

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    implementation 'org.springframework.boot:spring-boot-starter-web-services'
    implementation 'org.glassfish.jaxb:jaxb-runtime:4.0.5'
    implementation 'wsdl4j:wsdl4j:1.6.3'

    runtimeOnly 'org.postgresql:postgresql:42.7.4'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

sourceSets {
    main {
        resources { srcDirs = ['src/main/resources', 'initdb'] }
        java { srcDirs += ["$buildDir/generated-sources/jaxb"] }
    }
}

configurations { jaxb }
dependencies { jaxb 'org.glassfish.jaxb:jaxb-xjc:4.0.5' }

tasks.register('xjc') {
    group = 'build'
    description = 'Generate JAXB classes from XSD'

    def schemaDir = file('src/main/resources')
    def schemaFile = file('src/main/resources/matches.xsd')
    def outDir = file("$buildDir/generated-sources/jaxb")

    inputs.files(schemaFile)
    outputs.dir(outDir)

    doLast {
        if (!schemaFile.exists()) throw new GradleException("XSD not found: ${schemaFile}")
        outDir.mkdirs()
        ant.taskdef(name: 'xjc', classname: 'com.sun.tools.xjc.XJCTask', classpath: configurations.jaxb.asPath)
        ant.xjc(destdir: outDir, package: 'app.premierleague.ws', extension: true) {
            schema(dir: schemaDir, includes: 'matches.xsd')
        }
    }
}

tasks.named('compileJava') { dependsOn tasks.named('xjc') }

tasks.register('submitOne', JavaExec) {
    group = 'application'
    description = 'Submit one match result via SOAP'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'app.premierleague.cli.SubmitResultCli'

    standardInput = System.in

    systemProperty 'endpoint', project.findProperty('endpoint') ?: 'http://localhost:8080/ws'
    if (project.hasProperty('teamsUrl')) {
        systemProperty 'teamsUrl', project.property('teamsUrl')
    }

    if (project.hasProperty('homeName')) systemProperty 'homeName', project.property('homeName')
    if (project.hasProperty('awayName')) systemProperty 'awayName', project.property('awayName')
    if (project.hasProperty('home'))     systemProperty 'home',     project.property('home')
    if (project.hasProperty('away'))     systemProperty 'away',     project.property('away')
}

bootRun {
    jvmArgs "-Dspring.devtools.restart.enabled=false"
}

